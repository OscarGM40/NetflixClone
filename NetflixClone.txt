      NETFLIX CLONE BY ILW YENNEFER

Source: https://www.youtube.com/watch?v=cwqNAkwhKqw&ab_channel=ILWYennefer
Repo: https://github.com/lukef7fywmrp/netflix-redesign

Empezamos creando un proyecto con next y tailwind con su starter:
npx create-next-app --example with-tailwindcss <app-name>
Next.js has in-built routing system directory(everything inside the pages directory actually becomes a page,with its name as route )

Recuerda que tailwind va a crear un file con sus tres directivas y en él puedo targetear al html ya establecido o crear mis propias clases:
** En el global.css:
@tailwind base; <- diria que es como un import(investigar)
@tailwind components;
@tailwind utilities;

/* capa que targetea al html ya establecido,es decir las tags como html, body, h1,ul,etc  */
@layer base {
  body {
    @apply bg-[#141414] text-white;
  }
}

/* capa para crear custom classNames para mis componentes */
@layer components {
  .headerLink {
    @apply cursor-pointer text-sm font-light text-[#e5e5e5] transition duration-[.4s] hover:text-[#b3b3b3];
  }
}

En cuanto a los iconos de nuevo vamos a usar dos librerias:
 1- la libreria heroicons(que es un poco más minimalista que react-icons,es decir,tiene menos iconos a nuestra disposición):

>yarn add @heroicons/react(fijate que en la v2 en TS me pedirá los tipos,puedo hacer downgrade a la major 1 para evitarlo)

 2- la libreria react-icons:esta libreria en realidad es un wrapper de varias librerias de iconos,englobando una gran cantidad de ellos
 
 >yarn add react-icons

 TIP: para crear gradientes en tailwind tengo que usar tres propiedades:
 1- hacia que direccion -> bg-gradient-to-b (to bottom) o bg-gradient-to-l(to left)
 2- desde que color(from- + color) -> from-gray-900/10
 3- hasta que color(to- + color) -> to-[#141414]
 En conjunto quedaria algo asi: <div className="bg-gradient-to-b from-gray-900/10 to-[#010511]" (fijate que el from y el to son bastante negros ambos)

 Recuerda que vamos a integrar la API de TheMovieDataBase(TMDB) con lo que hay que registrarse y sacar una key(la tengo en settings/api,es la v3.Ojo,que es la privada.
Despues en el home vamos a pedir en paralelo varias colecciones con Promise.all usando SSR(archivo pages/index.tsx).Perfect

 TIP: recuerda que las interfaces se pueden extender mientras que los types no(aunque tendria acceso a los built-in types).
 
 NOTA: Tailwind no tiene por defecto nada para trabajar con text-shadows,pero se pueden instalar paquetes adicionales(ojo que es un plugin) para acceder a estar funcionalidad(usaremos la libreria tailwindcss-text-shadow).Fijate que nos vale con que sea una dev dependency:

 >yarn add tailwindcss-textshadow -D

Y dado que es un plugin tenemos que decirselo a tailwind en el tailwind.config.js:
  plugins: [
    require('tailwindcss-textshadow'), +...
  ],

NOTA: vamos a ocultar todos los scrolls tmb mediante la libreria(otro plugin) tailwind-scrollbar-hide:
yarn add tailwind-scrollbar-hide <- de nuevo declarar como plugin

IMPORTANTE: de nuevo esto lo que hace es darme acceso a la utility-class llamada scrollbar-hide(de igual manera que antes añadi las clases text-shadow-XXX).Incluso lo veré en el IDE

TERCER PLUGIN: y de nuevo tenemos un scroll lateral ultrafeo,vamos a usar otro plugin/libreria llamado 'tailwind-scrollbar'.No confundir con la libreria anterior.Éste es una dev-dependency(no entiendo porqué):
>yarn add -D tailwind-scrollbar 
Esta vez se exponen varias clases(ver documentación de la lib).Usaremos la scrollbar-thin(hay dos anchos,el normal sigue siendo feo) y además será rounded(fijate que hubo que configurar más cosas para esto y fijate en los important)

@layer base {
  body {
    @apply bg-[#141414] text-white !scrollbar-thin !scrollbar-track-transparent !scrollbar-thumb-red-600 scrollbar-thumb-rounded-full scrollbar-track-rounded-full; 
  }

  Debe saber cuando una etiqueta es de bloque,cuando inline y cuando inline-block y qué significa esto para su altura y anchura

  2h04: fijate que la experiencia de usuario incrementa al poner las flechas de navegación en el carousel
  2h10m: memoriza como puedo sacar el scroll horizontal a un carousel con una simple ref,las propiedades scrollLeft y clientWidth(está es el ancho de la ventana) y el método scrollTo({}):

  1- creo una ref al div que será el contenedor de las imagenes:
  const rowRef = useRef<HTMLDivElement>(null);
  2- creo un handler para los chevron del div según la direction:
  const handleClick = (direction:string) => {
    if(rowRef.current){ <- realmente ya habrá asignado la ref,pero es una guarda
      const {scrollLeft,clientWidth} = rowRef.current; 

      const scrollTo = direction === 'left' ? scrollLeft - clientWidth : scrollLeft + clientWidth; <- si es para la izda se resta(por ejemplo podria ser 3000px - 1024px,determinando que queremos ir hasta los 2000px en el método scrollTo)
   
     rowRef.current.scrollTo({left:scrollTo,behavior:'smooth'});
     * TIPS: no confundir el método div.scrollTo con la variable scrollTo.Si estoy en un ancho de 1024px la primera vez será 0 + 1024px determinando que quiero ir 1024px a la derecha(si hiciera click en la derecha,etc)
    }
  }
  Puebo observar que no necesito libreria alguna para crear un caroulsel fácilmente
  IMPORTANTE: podia haber usado rowRef.current.scrollLeft y rowRef.current.clientWidth pero mejor desestructurar el objeto rowRef.current(el div en este caso)
  Diria que esto me valdrá para cualquier elemento en bloque.
  Fijate que la forma de Lama es con CSS en vez de Javascript y permite volver al primer slide de forma natural,algo que puedo querer integrar también

  Tailwind me permite fijar de forma global varias features(como el backgroungImage).Esto siempre va en el tailwind.config.js en la propiedad theme y en extend para que extienda y lo aplique a todo el theme:

    theme: {
    extend: {
/*       textShadow: {
        md: "2px 2px 4px rgb(0 0 0 / 45%);",
      }, */
      backgroundImage: {
        "gradient-to-b":
          "linear-gradient(to bottom,rgba(20,20,20,0) 0,rgba(20,20,20,.15) 15%,rgba(20,20,20,.35) 29%,rgba(20,20,20,.58) 44%,#141414 68%,#141414 100%);",
      },
    },
  },
  Si te fijas todo lo que se ha hecho lo sabes hacer,a excepción del scroll por JS en el carousel.Fijate en el poder del SSR y de Tailwind,que combinados son un pepino.

      DAY TWO

Lo primero vamos a crear el proyecto de Firebase para la DB(entiendo que la necesitamos para los usuarios y para la lista de movies favoritas).Una vez creado instalamos el SDK de Firebase:
>yarn add firebase

Despues creamos el file de configuracion 'firebase.ts' en la raiz del proyecto:

EY tiene una pinta terrible y encima es full-stack
atSistemas es con React
viewNext es con React
UST LATAM es full-stack parece malo
ZRG(PromoFarma) es con React
Liferay es con React
Ucademy es full-stack,parece interesante

Fijate que el hook useAuth podriamos extrapolarlo a otros backends,en este caso usamos Firebase pero podria valer para Node + Mongo,etc
Desde luego para esta casuistica/tipo de aplicación el hook le viene al pelo.

Modal para ver una Movie(usando recoil).Fijate que si bien cualquier app en producción va a ser redux,para apps tan sencillas como está recoil le viene muy bien:
>yarn add recoil
También vamos a usar una modal de Material UI,asi que en este punto instalamos recoil y material v5:
>yarn add @mui/material @emotion/react @emotion/styled

NOTA: recoil necesita un HOC,normalmente en el punto más alto de la app.Ya nos lo proporcionan, es el <RecoilRoot></RecoilRoot>.Nuestro mejor punto es el _app:

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <AuthProvider>
      <RecoilRoot>
        <Component {...pageProps} />
      </RecoilRoot>
    </AuthProvider>
  );
}

Un atom representa una pieza de estado.Los atoms pueden ser leidos y cambiados desde cualquier componente.Cualquier componente que lea un atom es implicitamente suscrito a ese atom/state,asi que cualquier cambio en ese valor re-renderizara ese componente/componentes.Se crean con la funcion atom:

const textState= atom({
  key:'textState',
  default:''
})

Asi pues creamos dos simples slices para guardar una movie y el estado de la modal en esta app tan sencilla:
* En atoms/modal.ts(fijate que habria que haber creado incluso dos files)

export const modalState = atom<boolean>({
  key: "modalState",
  default: false,
});

export const movieState = atom<Movie | DocumentData | null>({
  key: "movieState",
  default: null,
});

Para acceder a los getters de estos states uso useRecoilValue:
 const showModal = useRecoilValue(modalState);

Para acceder a los getters y setters uso useRecoilState:
 const [showModal, setShowModal] = useRecoilState(modalState);

En el JSX vemos solo la modal si el boolean es true
 {showModal &&  <Modal /> }

 1h33: para la reproducción del video vamos a usar la libreria react-player,que es muy usada.La libreria esta aqui(yarn add react-player):
 https://www.npmjs.com/package/react-player

 Para usarla simplemente usamos su Wrapper Cmp.Amazing

import React from 'react'
import ReactPlayer from 'react-player'

// Render a YouTube video player
<ReactPlayer url='https://www.youtube.com/watch?v=ysz5S6PUM-U' />

1h57m:
